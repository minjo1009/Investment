name: CompareToSingle_v2_STRICT
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP_A_URL:
        description: URL to code ZIP A (raw URL)
        required: true
        type: string
      CODE_ZIP_B_URL:
        description: URL to code ZIP B (raw URL)
        required: true
        type: string
      DATA_ZIP_URL:
        description: URL to data ZIP (raw URL)
        required: true
        type: string
      CSV_GLOB:
        description: Glob to detect the CSV (e.g. **/*ETHUSDT*1min*2020*2025*.csv)
        required: true
        type: string
      PY:
        description: Python version
        required: true
        default: "3.11"
        type: string
      OS:
        description: Runner OS
        required: true
        default: "ubuntu-latest"
        type: choice
        options:
          - ubuntu-latest
      PIN_STRICT:
        description: Enforce pinned SHAs (true/false)
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"
      RUN_ID_TAG:
        description: Optional tag appended to artifact names
        required: false
        default: ""
        type: string

jobs:
  run:
    name: Compare A vs B
    runs-on: ${{ inputs.OS }}
    env:
      SHA_SETUP_PYTHON: "a26af69be951a213d495a4c3e4e4022e16d87065"
      SHA_UPLOAD_ARTIFACT: "ea165f8d65b6e75b540449e92b4886f43607fa02"
      CSV_GLOB: "${{ inputs.CSV_GLOB }}"
      RUN_ID_TAG: "${{ inputs.RUN_ID_TAG }}"
    steps:
      - name: Validate pinned SHAs (STRICT)
        if: ${{ inputs.PIN_STRICT == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Validating action SHAs..."
          for repo sha in "actions/setup-python $SHA_SETUP_PYTHON" "actions/upload-artifact $SHA_UPLOAD_ARTIFACT"; do
            set -- $repo sha
          done
          # Manual validation because bash 'for' above packs pairs differently on some shells; do explicit checks
          repos=("actions/setup-python" "actions/upload-artifact")
          shas=("$SHA_SETUP_PYTHON" "$SHA_UPLOAD_ARTIFACT")
          for i in 0 1; do
            repo="${repos[$i]}"
            sha="${shas[$i]}"
            echo "Checking $repo @ $sha"
            git ls-remote "https://github.com/${repo}.git" | grep -i "^${sha}"
          done
          echo "All SHAs validated."
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "${{ inputs.PY }}"
      - name: Install base deps
        shell: bash
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          pip install pandas numpy scikit-learn pyyaml
      - name: Prepare workspace
        shell: bash
        run: |
          set -euo pipefail
          install -d tmp dl data runA runB out/A out/B scripts || true
      - name: Download artifacts (code A / code B / data ZIPs)
        shell: bash
        run: |
          set -euo pipefail
          echo "Downloading A: ${{ inputs.CODE_ZIP_A_URL }}"
          curl -fsSL -o dl/codeA.zip "${{ inputs.CODE_ZIP_A_URL }}"
          echo "Downloading B: ${{ inputs.CODE_ZIP_B_URL }}"
          curl -fsSL -o dl/codeB.zip "${{ inputs.CODE_ZIP_B_URL }}"
          echo "Downloading Data: ${{ inputs.DATA_ZIP_URL }}"
          curl -fsSL -o dl/data.zip "${{ inputs.DATA_ZIP_URL }}"
          echo "SHA256 (codeA.zip): $(sha256sum dl/codeA.zip | cut -d' ' -f1)"
          echo "SHA256 (codeB.zip): $(sha256sum dl/codeB.zip | cut -d' ' -f1)"
          echo "SHA256 (data.zip): $(sha256sum dl/data.zip | cut -d' ' -f1)"
      - name: Unzip data
        shell: bash
        run: |
          set -euo pipefail
          unzip -q -o dl/data.zip -d data
          shopt -s globstar nullglob
          match=()
          for f in data/**/${CSV_GLOB}; do
            if [ -f "$f" ]; then
              match+=("$f")
            fi
          done
          if [ "${#match[@]}" -eq 0 ]; then
            echo "No CSV matched glob: ${CSV_GLOB}"
            echo "::error::CSVDetect"
            exit 1
          fi
          CSV_PATH="${match[0]}"
          echo "CSV_PATH=$CSV_PATH" >> $GITHUB_ENV
          echo "Detected CSV: $CSV_PATH"
      - name: Write preflight_strict.py
        shell: bash
        run: |
          set -euo pipefail
          install -d scripts || true
          f="scripts/preflight_strict.py"
          printf '%s
'           'import sys,csv'           'REQ=["open_time","open","high","low","close","volume"]'           'p=sys.argv[1]'           'with open(p,"r",encoding="utf-8",errors="ignore") as fh:'           '    r=csv.reader(fh)'           '    hdr=next(r,None)'           '    if not hdr: sys.exit("Empty CSV")'           'miss=[c for c in REQ if c not in hdr]'           'if miss: sys.exit("Missing columns: "+",".join(miss))'           > "$f"
      - name: Preflight CSV
        shell: bash
        run: |
          set -euo pipefail
          python scripts/preflight_strict.py "$CSV_PATH"
      - name: Unzip code A and B
        shell: bash
        run: |
          set -euo pipefail
          unzip -q -o dl/codeA.zip -d runA
          unzip -q -o dl/codeB.zip -d runB
      - name: Write entrypoint detector
        shell: bash
        run: |
          set -euo pipefail
          f="scripts/entrypoint_detect.sh"
          printf '%s
'           '#!/usr/bin/env bash'           'set -euo pipefail'           'root="$1"'           'if [ -f "$root/run_4u.py" ]; then echo "$root/run_4u.py"; exit 0; fi'           'if [ -f "$root/backtest/run_4u.py" ]; then echo "$root/backtest/run_4u.py"; exit 0; fi'           'if [ -f "$root/run.py" ]; then echo "$root/run.py"; exit 0; fi'           'if [ -f "$root/backtest/runner.py" ]; then echo "$root/backtest/runner.py"; exit 0; fi'           'echo ""'           > "$f"
          chmod +x "$f"
      - name: Run code A
        shell: bash
        run: |
          set -Eeuo pipefail
          EP="$(scripts/entrypoint_detect.sh runA)"
          echo "A Entrypoint: $EP"
          mkdir -p out/A || true
          export PYTHONPATH="runA:runA/src:runA/trend4u"
          export DATA_PATH="$CSV_PATH"
          if [ -n "$EP" ]; then
            python "$EP" || true
          fi
          # Ensure 4 artifacts exist
          for f in summary.json gating_debug.json preds_test.csv trades.csv; do
            test -f "$f" || true
          done
          # Collect if available
          find . -maxdepth 2 -name summary.json -exec cp {} out/A/summary.json \; || true
          find . -maxdepth 2 -name gating_debug.json -exec cp {} out/A/gating_debug.json \; || true
          find . -maxdepth 2 -name preds_test.csv -exec cp {} out/A/preds_test.csv \; || true
          find . -maxdepth 2 -name trades.csv -exec cp {} out/A/trades.csv \; || true
          # Create empty placeholders if missing
          [ -f out/A/summary.json ] || printf '{}' > out/A/summary.json
          [ -f out/A/gating_debug.json ] || printf '{}' > out/A/gating_debug.json
          [ -f out/A/preds_test.csv ] || printf 'empty\n' > out/A/preds_test.csv
          [ -f out/A/trades.csv ] || printf 'empty\n' > out/A/trades.csv
      - name: Run code B
        shell: bash
        run: |
          set -Eeuo pipefail
          EP="$(scripts/entrypoint_detect.sh runB)"
          echo "B Entrypoint: $EP"
          mkdir -p out/B || true
          export PYTHONPATH="runB:runB/src:runB/trend4u"
          export DATA_PATH="$CSV_PATH"
          if [ -n "$EP" ]; then
            python "$EP" || true
          fi
          # Ensure 4 artifacts exist
          for f in summary.json gating_debug.json preds_test.csv trades.csv; do
            test -f "$f" || true
          done
          # Collect if available
          find . -maxdepth 2 -name summary.json -exec cp {} out/B/summary.json \; || true
          find . -maxdepth 2 -name gating_debug.json -exec cp {} out/B/gating_debug.json \; || true
          find . -maxdepth 2 -name preds_test.csv -exec cp {} out/B/preds_test.csv \; || true
          find . -maxdepth 2 -name trades.csv -exec cp {} out/B/trades.csv \; || true
          # Create empty placeholders if missing
          [ -f out/B/summary.json ] || printf '{}' > out/B/summary.json
          [ -f out/B/gating_debug.json ] || printf '{}' > out/B/gating_debug.json
          [ -f out/B/preds_test.csv ] || printf 'empty\n' > out/B/preds_test.csv
          [ -f out/B/trades.csv ] || printf 'empty\n' > out/B/trades.csv
      - name: Write comparator
        shell: bash
        run: |
          set -euo pipefail
          f="scripts/compare_summaries.py"
          printf '%s
'           'import json,sys,os'           'def load(p):'           '    try:'           '        with open(p,"r",encoding="utf-8") as fh: return json.load(fh)'           '    except Exception:'           '        return {}'           'a=load("out/A/summary.json")'           'b=load("out/B/summary.json")'           'keys=set(a.keys())|set(b.keys())'           'cmp={}'           'for k in sorted(keys):'           '    cmp[k]={"A":a.get(k),"B":b.get(k)}'           'with open("out/compare_summary.json","w",encoding="utf-8") as fh:'           '    json.dump(cmp,fh,ensure_ascii=True,indent=2)'           > "$f"
          python "$f"
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: compare_${{ github.run_id }}_${{ env.RUN_ID_TAG }}
          path: |
            out/A
            out/B
            out/compare_summary.json
          if-no-files-found: warn
