name: Backtest V2 Train Model

on:
  workflow_dispatch:
  workflow_call:

jobs:
  diag_align:
    uses: ./.github/workflows/backtest_v2_diag_align.yml
    with:
      DATA_ZIP: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB: '*.csv'
    secrets: inherit
  train:
    needs: diag_align
    runs-on: ubuntu-latest
    steps:
      - name: Validate pinned SHAs
        run: |
          set -e
          git ls-remote https://github.com/actions/checkout | grep 08c6903cd8c0fde910a37f88322edcfb5dd907a8
          git ls-remote https://github.com/actions/setup-python | grep a26af69be951a213d495a4c3e4e4022e16d87065
          git ls-remote https://github.com/actions/upload-artifact   | grep ea165f8d65b6e75b540449e92b4886f43607fa02
          git ls-remote https://github.com/actions/download-artifact | grep refs/tags/v4

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scikit-learn joblib

      - name: Download backtest outputs
        uses: actions/download-artifact@v4
        with:
          name: backtest_v2_diag_align
          path: _out_4u

      - name: List artifact files
        run: ls -R _out_4u

      - name: Train model
          run: |
            python - <<'PY'
# Auto-generated training script
import pandas as pd
import numpy as np
import yaml, joblib
from sklearn.linear_model import LogisticRegression

# 1. feature flags 로드
with open('conf/feature_flags.yml', 'r') as f:
    flags = yaml.safe_load(f) or {}
p_thr    = (flags.get('entry', {}) or {}).get('p_thr', {'range':0.55, 'trend':0.50})
p_ev_req = (flags.get('ev',    {}) or {}).get('p_ev_req', {'range':0.55, 'trend':0.50})

# 2. preds_test.csv 로드
df = pd.read_csv('_out_4u/run/preds_test.csv')

# 3. 라벨 생성
if 'label' not in df.columns or df['label'].isnull().all():
    def mk_label(row):
        reg = row.get('regime', 'range')
        thr = p_thr.get(reg, 0.5)
        evr = p_ev_req.get(reg, 0.5)
        return int((row['p_trend'] >= thr) and (row['p_trend'] >= evr))
    df['label'] = df.apply(mk_label, axis=1)

# 4. 피처 채우기
for col in ['p_trend','macd_hist','rsi','adx','ofi']:
    if col not in df.columns:
        df[col] = 0.0

# 5. 클래스 균형 확인
X = df[['p_trend','macd_hist','rsi','adx','ofi']]
y = df['label'].astype(int)
if y.nunique() < 2:
    raise ValueError('Training data has only one class; adjust thresholds or generate more data.')

# 6. 로지스틱 회귀 학습 및 저장
clf = LogisticRegression(max_iter=1000, solver='liblinear')
clf.fit(X, y)
joblib.dump(clf, 'conf/model.pkl')
print('[INFO] LogisticRegression trained and saved')
PY

      - name: Upload model
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: trained-model
          path: conf/model.pkl
