name: Backtest V2 Train Model

on:
  workflow_dispatch:
  workflow_call:

jobs:
  diag_align:
    uses: ./.github/workflows/backtest_v2_diag_align.yml
    with:
      DATA_ZIP: ETHUSDT_1min_2020_2025.zip
      CSV_GLOB: '*.csv'
    secrets: inherit
  train:
    needs: diag_align
    runs-on: ubuntu-latest
    steps:
      - name: Validate pinned SHAs
        run: |
          set -e
          git ls-remote https://github.com/actions/checkout | grep 08c6903cd8c0fde910a37f88322edcfb5dd907a8
          git ls-remote https://github.com/actions/setup-python | grep a26af69be951a213d495a4c3e4e4022e16d87065
          git ls-remote https://github.com/actions/upload-artifact   | grep ea165f8d65b6e75b540449e92b4886f43607fa02
          git ls-remote https://github.com/actions/download-artifact | grep refs/tags/v4

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scikit-learn joblib

      - name: Download backtest outputs
        uses: actions/download-artifact@v4
        with:
          name: backtest_v2_diag_align
          path: artifact.zip

      - name: Extract artifacts to repo root
        run: |
          mkdir -p _out_4u
          bsdtar -x -f artifact.zip -C .
          find _out_4u -maxdepth 2 -type f | sed -n '1,20p'

      - name: Train model
        run: |
          sed -E 's/^[[:space:]]{10}//' <<'PY' | python -
import pandas as pd, numpy as np, yaml, joblib
from sklearn.linear_model import LogisticRegression
from sklearn.utils.validation import check_is_fitted
from backtest.utils import rebalance_labels_by_regime

# 1. feature flags 로드
with open('conf/feature_flags.yml', 'r') as f:
    flags = yaml.safe_load(f) or {}
p_thr    = (flags.get('entry', {}) or {}).get('p_thr', {'range':0.55, 'trend':0.50})
p_ev_req = (flags.get('ev',    {}) or {}).get('p_ev_req', {'range':0.55, 'trend':0.50})

# 2. preds_test.csv 로드
df = pd.read_csv('_out_4u/run/preds_test.csv')

use_cols = ['p_trend','macd_hist','rsi','adx','ofi']
df[use_cols] = df[use_cols].apply(pd.to_numeric, errors='coerce')
X = df[use_cols].fillna(0).values
assert np.isfinite(X).all(), "Non-finite in X"
assert (pd.DataFrame(X).std() > 1e-8).all(), "Zero-variance feature"

# 3. 라벨 생성
if 'label' not in df.columns or df['label'].isnull().all():
    def mk_label(row):
        reg = row.get('regime', 'range')
        thr = p_thr.get(reg, 0.5)
        evr = p_ev_req.get(reg, 0.5)
        return int((row['p_trend'] >= thr) and (row['p_trend'] >= evr))
    df['label'] = df.apply(mk_label, axis=1)

y = pd.to_numeric(df['label'], errors='coerce').fillna(0).astype(int).to_numpy()
vc = pd.Series(y).value_counts()
if len(vc) < 2 or (vc.min()/vc.max()) < 0.2:
    y = rebalance_labels_by_regime(df, target_ratio=(0.6,0.4))
    vc = pd.Series(y).value_counts()
    assert len(vc)==2 and (vc.min()/vc.max())>=0.2, f"Label imbalance: {vc.to_dict()}"

# 4. 로지스틱 회귀 학습 및 저장
clf = LogisticRegression(max_iter=1000, solver='liblinear')
clf.fit(X, y)
check_is_fitted(clf)
print("MODEL_META:", {"n_features": getattr(clf,"n_features_in_",None),
                     "coef_shape": getattr(clf,"coef_",None).shape if hasattr(clf,"coef_") else None})
joblib.dump(clf, 'conf/model.pkl')
print('[INFO] LogisticRegression trained and saved')
PY

      - name: Verify feature outputs
        run: |
          sed -E 's/^[[:space:]]{10}//' <<'PY' | python -
import pandas as pd, numpy as np, json
df = pd.read_csv('_out_4u/run/preds_test.csv')
need = ['rsi','adx','ofi']
missing = [c for c in need if c not in df.columns]
assert not missing, f"Missing features in preds_test.csv: {missing}"
for c in need:
    s = pd.to_numeric(df[c], errors='coerce')
    assert s.isna().mean() < 0.05, f"{c} NaN too high"
    assert s.std() > 1e-6, f"{c} flat/zero-variance"
print('[OK] RSI/ADX/OFI present & variable')
try:
    import joblib
    clf = joblib.load('conf/model.pkl')
    feats = getattr(clf, "feature_names_in_", None)
    if feats is not None:
        for f in feats:
            assert f in df.columns, f"Model feature missing in preds: {f}"
        print(f'[OK] feature_names_in_ matched: {len(feats)}')
except Exception as e:
    print(f'[WARN] model check skipped: {e}')
PY

      - name: Upload model
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: trained-model
          path: conf/model.pkl
