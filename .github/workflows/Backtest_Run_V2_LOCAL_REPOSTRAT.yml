name: Backtest_Run_V2_LOCAL_REPOSTRAT
on:
  workflow_dispatch:
    inputs:
      CSV_GLOB:
        description: Data CSV glob under data/ (leave default; auto-fallback to **/*.csv)
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
        required: true
        type: string
      PY:
        description: Python version
        default: "3.11"
        required: true
        type: choice
        options: ["3.11","3.10"]
      OUTDIR:
        description: Output directory under out/
        default: "A"
        required: true
        type: string
env:
  DATA_ZIP: ETHUSDT_1min_2020_2025.zip
  CALIB_JSON: conf/calibrator_isotonic.json
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ inputs.PY }}
      - name: Locate runner & params
        shell: bash
        run: |
          set -e
          echo "PYTHONPATH=.:src" >> "$GITHUB_ENV"
          RUNNER=""
          for f in backtest/runner_patched_v2_iso.py backtest/runner_patched.py backtest/runner.py; do
            if [ -f "$f" ]; then RUNNER="$f"; break; fi
          done
          if [ -z "$RUNNER" ]; then echo "::error::No runner under backtest/"; exit 1; fi
          if [ ! -f "conf/params_champion.yml" ]; then echo "::error::conf/params_champion.yml missing"; exit 1; fi
          echo "RUNNER=$RUNNER" >> "$GITHUB_ENV"
          echo "Using runner: $RUNNER"
      - name: Prepare raw data (recursive unzip + glob fallback)
        shell: bash
        run: |
          set -e
          rm -rf data || true
          if [ -f "$DATA_ZIP" ]; then unzip -q -o "$DATA_ZIP" -d data; fi
          if [ ! -d data ]; then echo "::error::No data found. Put $DATA_ZIP or add data/"; exit 1; fi
          find data -type f -name '*.zip' -print0 | while IFS= read -r -d '' z; do d=`dirname "$z"`; echo "::notice::Unzipping nested $z"; unzip -q -o "$z" -d "$d" || true; rm -f "$z" || true; done
          find data -type f -name '*.csv.gz' -print0 | xargs -0 -I{} sh -c 'gzip -df "{}" || true'
          python -c "import glob,os; pat=os.environ.get('INPUT_CSV_GLOB') or '**/*.csv'; ms=glob.glob(os.path.join('data',pat), recursive=True); eff=pat if ms else '**/*.csv'; open(os.environ['GITHUB_ENV'],'a').write('CSV_GLOB_EFF='+eff+'\n'); print('[DATA]',len(ms),'matches; effective glob =',eff)"
      - name: Install dependencies
        shell: bash
        run: |
          set -e
          python -V; pip -V
          pip install --upgrade pip
          pip install --prefer-binary numpy<2.0 llvmlite==0.42.* numba==0.59.* pandas<2.3 scikit-learn<1.5 pyyaml
      - name: Run backtest
        shell: bash
        run: |
          set -e
          CAL_OPT=""; if [ -f "$CALIB_JSON" ]; then CAL_OPT="--calibrator $CALIB_JSON"; fi
          install -d "out/${{ inputs.OUTDIR }}"
          python "$RUNNER" --mode run --data-root data --csv-glob "${CSV_GLOB_EFF}" --params conf/params_champion.yml --outdir "out/${{ inputs.OUTDIR }}" $CAL_OPT
      - name: Inspect outputs
        shell: bash
        run: |
          set -e
          if [ ! -f "out/${{ inputs.OUTDIR }}/summary.json" ]; then echo "::error::summary.json missing"; exit 1; fi
          python -c "import os,json; p='out/'+(os.environ.get('INPUT_OUTDIR','A'))+'/summary.json'; print('[SUMMARY]', json.load(open(p)))"
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: backtest_repo_${{ github.run_id }}
          path: out/${{ inputs.OUTDIR }}
          if-no-files-found: error
