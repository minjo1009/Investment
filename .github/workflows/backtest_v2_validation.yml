name: BacktestV2-Validation

on:
  workflow_dispatch:
    inputs:
      DATA_ZIP:
        description: 'ZIP file containing CSV data (default: ETHUSDT_1min_2020_2025.zip)'
        required: false
        default: 'ETHUSDT_1min_2020_2025.zip'
      CSV_GLOB:
        description: 'Glob pattern for CSV inside data folder'
        required: false
        default: '*.csv'

env:
  PYTHON_VERSION: '3.11'
  CHECKOUT_SHA: '08c6903cd8c0fde910a37f88322edcfb5dd907a8'
  SETUP_PYTHON_SHA: 'a26af69be951a213d495a4c3e4e4022e16d87065'
  UPLOAD_ARTIFACT_SHA: 'ea165f8d65b6e75b540449e92b4886f43607fa02'

jobs:
  backtest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (pinned)
        uses: actions/checkout@${{ env.CHECKOUT_SHA }}

      - name: Set up Python (pinned)
        uses: actions/setup-python@${{ env.SETUP_PYTHON_SHA }}
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install pandas numpy scikit-learn pyyaml

      - name: Prepare directories
        run: |
          install -d _in _out_4u/run data

      - name: Extract data zip
        run: |
          set -e
          cp "${{ inputs.DATA_ZIP }}" _in/data.zip
          python -c "import zipfile; zipfile.ZipFile('_in/data.zip').extractall('data')"
          # ensure gating_debug.json exists so pandas reads it later
          mkdir -p _out_4u/run && touch _out_4u/run/gating_debug.json

      - name: Run backtest
        run: |
          set -e
          python backtest/runner_patched.py \
            --data-root data \
            --csv-glob "${{ inputs.CSV_GLOB }}" \
            --params conf/params_champion.yml \
            --flags conf/feature_flags.yml \
            --outdir _out_4u/run \
            --limit-bars 250000 || true
          # guarantee summary and trades files exist
          python - <<'PY'
import json, os
base = '_out_4u/run'
if not os.path.exists(f'{base}/summary.json'):
    json.dump({}, open(f'{base}/summary.json','w'))
    open(f'{base}/preds_test.csv','w').close()
    open(f'{base}/trades.csv','w').close()
PY

      - name: Print summary metrics and gate columns
        run: |
          python - <<'PY'
import json, os, pandas as pd
base='_out_4u/run'
s=json.load(open(f'{base}/summary.json')) if os.path.exists(f'{base}/summary.json') else {}
print('=== SUMMARY ===')
print({'winrate': s.get('winrate'), 'mcc': s.get('mcc'),
       'num_trades': s.get('num_trades'), 'cum_pnl_bps': s.get('cum_pnl_bps')})
dbg = pd.read_json(f'{base}/gating_debug.json', typ='list') if os.path.getsize(f'{base}/gating_debug.json') > 0 else pd.DataFrame()
cols = [c for c in ['divergence','in_box','ofi_z','regime','size_frac'] if c in dbg]
print('=== GATE COLUMNS PRESENT ===')
print(cols)
PY

      - name: Upload artifacts (pinned)
        uses: actions/upload-artifact@${{ env.UPLOAD_ARTIFACT_SHA }}
        with:
          name: backtest_v2_results
          path: |
            _out_4u/run/summary.json
            _out_4u/run/gating_debug.json
            _out_4u/run/preds_test.csv
            _out_4u/run/trades.csv
