name: SensitivityScan_V2_LOCAL_REPOSTRAT
on:
  workflow_dispatch:
    inputs:
      CSV_GLOB:
        description: Data CSV glob under data/ (auto-fallback to **/*.csv if no match)
        default: "**/*ETHUSDT*1min*2020*2025*.csv"
        required: true
        type: string
      THR_LIST:
        description: p_thr list
        default: "0.86,0.88"
        required: true
        type: string
      HOLD_LIST:
        description: min_hold list
        default: "6,8"
        required: true
        type: string
      PY:
        description: Python version
        default: "3.11"
        required: true
        type: choice
        options: ["3.11","3.10"]
env:
  DATA_ZIP: ETHUSDT_1min_2020_2025.zip
  CALIB_JSON: conf/calibrator_isotonic.json
jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ inputs.PY }}

      - name: Locate runner & prepare data (recursive unzip + fallback glob)
        shell: bash
        run: |
          set -euo pipefail
          echo "PYTHONPATH=.:src" >> "$GITHUB_ENV"
          for f in backtest/runner_patched_v2_iso.py backtest/runner_patched.py backtest/runner.py; do
            if [ -f "$f" ]; then echo "RUNNER=$f" >> "$GITHUB_ENV"; echo "Using runner: $f"; break; fi
          done
          grep -q '^RUNNER=' "$GITHUB_ENV" || { echo "::error::No runner found under backtest/"; exit 1; }
          if [ -f "$DATA_ZIP" ]; then unzip -q -o "$DATA_ZIP" -d data; fi
          [ -d data ] || { echo "::error::No data found. Put $DATA_ZIP or add data/"; exit 1; }
          find data -type f -name '*.zip' -print0 | while IFS= read -r -d '' z; do d="$(dirname "$z")"; echo "::notice::Unzipping nested $z"; unzip -q -o "$z" -d "$d" || true; rm -f "$z" || true; done
          find data -type f -name '*.csv.gz' -print0 | xargs -0 -I{} sh -c 'gzip -df "{}" || true'
          MATCHES=$(python - <<'PY'\nimport glob,os\npat=os.environ.get('INPUT_CSV_GLOB') or '**/*.csv'\nms=glob.glob(os.path.join('data',pat), recursive=True)\nprint(len(ms))\nPY\n)
          if [ "${MATCHES}" = "0" ]; then echo "::warning::No match for '${{ inputs.CSV_GLOB }}'. Falling back to '**/*.csv'"; echo "CSV_GLOB_EFF=**/*.csv" >> "$GITHUB_ENV"; else echo "CSV_GLOB_EFF=${{ inputs.CSV_GLOB }}" >> "$GITHUB_ENV"; fi

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install --prefer-binary "numpy<2.0" "llvmlite==0.42.*" "numba==0.59.*" "pandas<2.3" "scikit-learn<1.5" "pyyaml"

      - name: Sensitivity loop
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -r -a thrs <<< "${{ inputs.THR_LIST }}"
          IFS=',' read -r -a holds <<< "${{ inputs.HOLD_LIST }}"
          CAL_OPT=""; [ -f "$CALIB_JSON" ] && CAL_OPT="--calibrator $CALIB_JSON"
          RUNNER="$(grep ^RUNNER= "$GITHUB_ENV" | tail -n1 | cut -d= -f2-)"
          for thr in "${thrs[@]}"; do
            for hold in "${holds[@]}"; do
              tag="thr_${thr}_hold_${hold}"
              odir="out/${tag}"; install -d "$odir"
              par="${odir}/params.yml"
              THR="$thr" HOLD="$hold" PAR="$par" python -c "import os,yaml; thr=float(os.environ['THR']); hold=int(os.environ['HOLD']); d=yaml.safe_load(open('conf/params_champion.yml')); d.setdefault('entry',{}).setdefault('p_thr',{}); d['entry']['p_thr']['trend']=thr; d['entry']['p_thr']['range']=thr; d.setdefault('exit',{})['min_hold']=hold; yaml.safe_dump(d, open(os.environ['PAR'],'w'))"
              python "$RUNNER" --mode run --data-root data --csv-glob "${CSV_GLOB_EFF}" --params "$par" --outdir "$odir" $CAL_OPT
            done
          done

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sensitivity_repo_${{ github.run_id }}
          path: out
          if-no-files-found: error
