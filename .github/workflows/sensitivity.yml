name: SensitivityScan_v2_STRICT
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP_URL:
        description: URL to code ZIP (raw URL)
        required: true
        type: string
      DATA_ZIP_URL:
        description: URL to data ZIP (raw URL)
        required: true
        type: string
      CSV_GLOB:
        description: Glob to detect the CSV (e.g. **/*ETHUSDT*1min*2020*2025*.csv)
        required: true
        type: string
      PY:
        description: Python version
        required: true
        default: "3.11"
        type: string
      THR_LIST:
        description: Comma list for thr (e.g. 3.2,3.8)
        required: true
        default: "3.2,3.8"
        type: string
      HOLD_LIST:
        description: Comma list for hold (e.g. 6,8)
        required: true
        default: "6,8"
        type: string
      FILTER_LIST:
        description: Comma list for filter (e.g. ema,none)
        required: true
        default: "ema,none"
        type: string
      BE_LIST:
        description: Comma list for be (e.g. 0,5)
        required: true
        default: "0,5"
        type: string
      TP:
        description: Take-profit (decimal, e.g. 0.0038)
        required: true
        default: "0.0038"
        type: string
      SL:
        description: Stop-loss (decimal, e.g. 0.0022)
        required: true
        default: "0.0022"
        type: string

jobs:
  run:
    name: Sensitivity Sweep
    runs-on: ubuntu-latest
    env:
      SHA_SETUP_PYTHON: "a26af69be951a213d495a4c3e4e4022e16d87065"
      SHA_UPLOAD_ARTIFACT: "ea165f8d65b6e75b540449e92b4886f43607fa02"
      CSV_GLOB: "${{ inputs.CSV_GLOB }}"
    steps:
      - name: Validate pinned SHAs (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          for repo sha in "actions/setup-python $SHA_SETUP_PYTHON" "actions/upload-artifact $SHA_UPLOAD_ARTIFACT"; do :; done
          repos=("actions/setup-python" "actions/upload-artifact")
          shas=("$SHA_SETUP_PYTHON" "$SHA_UPLOAD_ARTIFACT")
          for i in 0 1; do
            repo="${repos[$i]}"
            sha="${shas[$i]}"
            echo "Checking $repo @ $sha"
            git ls-remote "https://github.com/${repo}.git" | grep -i "^${sha}"
          done
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "${{ inputs.PY }}"
      - name: Install base deps
        shell: bash
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          pip install pandas numpy scikit-learn pyyaml
      - name: Prepare workspace
        shell: bash
        run: |
          set -euo pipefail
          install -d dl data run out scripts || true
      - name: Download artifacts
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL -o dl/code.zip "${{ inputs.CODE_ZIP_URL }}"
          curl -fsSL -o dl/data.zip "${{ inputs.DATA_ZIP_URL }}"
          echo "SHA256 (code.zip): $(sha256sum dl/code.zip | cut -d' ' -f1)"
          echo "SHA256 (data.zip): $(sha256sum dl/data.zip | cut -d' ' -f1)"
      - name: Unzip
        shell: bash
        run: |
          set -euo pipefail
          unzip -q -o dl/data.zip -d data
          unzip -q -o dl/code.zip -d run
      - name: Detect CSV
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          match=()
          for f in data/**/${CSV_GLOB}; do
            if [ -f "$f" ]; then
              match+=("$f")
            fi
          done
          if [ "${#match[@]}" -eq 0 ]; then
            echo "No CSV matched glob: ${CSV_GLOB}"
            echo "::error::CSVDetect"
            exit 1
          fi
          echo "CSV_PATH=${match[0]}" >> $GITHUB_ENV
      - name: Preflight CSV
        shell: bash
        run: |
          set -euo pipefail
          install -d scripts || true
          f="scripts/preflight_strict.py"
          printf '%s
'           'import sys,csv'           'REQ=["open_time","open","high","low","close","volume"]'           'p=sys.argv[1]'           'with open(p,"r",encoding="utf-8",errors="ignore") as fh:'           '    r=csv.reader(fh)'           '    hdr=next(r,None)'           '    if not hdr: sys.exit("Empty CSV")'           'miss=[c for c in REQ if c not in hdr]'           'if miss: sys.exit("Missing columns: "+",".join(miss))'           > "$f"
          python "$f" "$CSV_PATH"
      - name: Write config injector
        shell: bash
        run: |
          set -euo pipefail
          f="scripts/inject_config.py"
          printf '%s
'           'import os,sys,json,yaml'           'thr=sys.argv[1]; hold=sys.argv[2]; filt=sys.argv[3]; be=sys.argv[4]; tp=sys.argv[5]; sl=sys.argv[6]'           'paths=[]'           'for root,dirs,files in os.walk("run"):'           '    for nm in files:'           '        if nm.endswith(".yml") or nm.endswith(".yaml"):'           '            paths.append(os.path.join(root,nm))'           'keys=["thr","hold","filter","be","tp","sl"]'           'vals=[thr,hold,filt,be,tp,sl]'           'for p in paths:'           '    try:'           '        with open(p,"r",encoding="utf-8") as fh: d=yaml.safe_load(fh) or {}'           '        changed=False'           '        def rec(node):'           '            nonlocal changed'           '            if isinstance(node,dict):'           '                for k in list(node.keys()):'           '                    if k in keys:'           '                        i=keys.index(k); node[k]=type(node[k])(vals[i]) if isinstance(node[k],(int,float)) else vals[i]; changed=True'           '                    rec(node.get(k))'           '            elif isinstance(node,list):'           '                for it in node: rec(it)'           '        rec(d)'           '        if changed:'           '            with open(p,"w",encoding="utf-8") as fw: yaml.safe_dump(d,fw,allow_unicode=False,sort_keys=False)'           '    except Exception as e:'           '        pass'           > "$f"
      - name: Write entrypoint detector
        shell: bash
        run: |
          set -euo pipefail
          f="scripts/entrypoint_detect.sh"
          printf '%s
'           '#!/usr/bin/env bash'           'set -euo pipefail'           'root="$1"'           'if [ -f "$root/run_4u.py" ]; then echo "$root/run_4u.py"; exit 0; fi'           'if [ -f "$root/backtest/run_4u.py" ]; then echo "$root/backtest/run_4u.py"; exit 0; fi'           'if [ -f "$root/run.py" ]; then echo "$root/run.py"; exit 0; fi'           'if [ -f "$root/backtest/runner.py" ]; then echo "$root/backtest/runner.py"; exit 0; fi'           'echo ""'           > "$f"
          chmod +x "$f"
      - name: Sweep
        shell: bash
        run: |
          set -Eeuo pipefail
          EP="$(scripts/entrypoint_detect.sh run)"
          echo "Entrypoint: $EP"
          export PYTHONPATH="run:run/src:run/trend4u"
          export DATA_PATH="$CSV_PATH"
          mkdir -p out || true
          IFS=',' read -r -a THR <<< "${{ inputs.THR_LIST }}"
          IFS=',' read -r -a HOLD <<< "${{ inputs.HOLD_LIST }}"
          IFS=',' read -r -a FILT <<< "${{ inputs.FILTER_LIST }}"
          IFS=',' read -r -a BE <<< "${{ inputs.BE_LIST }}"
          TP="${{ inputs.TP }}"
          SL="${{ inputs.SL }}"
          run_id=0
          for t in "${THR[@]}"; do
            for h in "${HOLD[@]}"; do
              for f in "${FILT[@]}"; do
                for b in "${BE[@]}"; do
                  run_id=$((run_id+1))
                  tag="thr_${t}_hold_${h}_f_${f}_be_${b}"
                  echo ">>> RUN ${run_id} : ${tag}"
                  python scripts/inject_config.py "$t" "$h" "$f" "$b" "$TP" "$SL" || true
                  if [ -n "$EP" ]; then
                    python "$EP" || true
                  fi
                  odir="out/${tag}"
                  mkdir -p "$odir" || true
                  find . -maxdepth 2 -name summary.json -exec cp {} "$odir/summary.json" \; || true
                  find . -maxdepth 2 -name gating_debug.json -exec cp {} "$odir/gating_debug.json" \; || true
                  find . -maxdepth 2 -name preds_test.csv -exec cp {} "$odir/preds_test.csv" \; || true
                  find . -maxdepth 2 -name trades.csv -exec cp {} "$odir/trades.csv" \; || true
                  [ -f "$odir/summary.json" ] || printf '{}' > "$odir/summary.json"
                  [ -f "$odir/gating_debug.json" ] || printf '{}' > "$odir/gating_debug.json"
                  [ -f "$odir/preds_test.csv" ] || printf 'empty\n' > "$odir/preds_test.csv"
                  [ -f "$odir/trades.csv" ] || printf 'empty\n' > "$odir/trades.csv"
                done
              done
            done
          done
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sensitivity_${{ github.run_id }}
          path: |
            out
          if-no-files-found: warn
