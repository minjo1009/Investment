name: CompareToSingle_v2_STRICT
on:
  workflow_dispatch:
    inputs:
      CODE_ZIP_A_URL:
        description: URL to code ZIP A (raw URL)
        required: true
        type: string
      CODE_ZIP_B_URL:
        description: URL to code ZIP B (raw URL)
        required: true
        type: string
      DATA_ZIP_URL:
        description: URL to data ZIP (raw URL)
        required: true
        type: string
      CSV_GLOB:
        description: Glob to detect the CSV (e.g. **/*ETHUSDT*1min*2020*2025*.csv)
        required: true
        type: string
      PY:
        description: Python version
        required: true
        default: "3.11"
        type: choice
        options:
          - "3.11"
          - "3.10"
      OS:
        description: Runner OS
        required: true
        default: "ubuntu-latest"
        type: choice
        options:
          - ubuntu-latest
      PIN_STRICT:
        description: Enforce pinned SHAs (true or false)
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

env:
  CHECKOUT_SHA: 08c6903cd8c0fde910a37f88322edcfb5dd907a8
  SETUP_PYTHON_SHA: a26af69be951a213d495a4c3e4e4022e16d87065
  UPLOAD_ARTIFACT_SHA: ea165f8d65b6e75b540449e92b4886f43607fa02

jobs:
  compare:
    runs-on: ${{ inputs.OS }}
    steps:
      - name: Validate pinned SHAs (STRICT)
        if: ${{ inputs.PIN_STRICT == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          repos=("actions/checkout" "actions/setup-python" "actions/upload-artifact")
          shas=("${CHECKOUT_SHA}" "${SETUP_PYTHON_SHA}" "${UPLOAD_ARTIFACT_SHA}")
          i=0
          while [ $i -lt ${#repos[@]} ]; do
            repo="${repos[$i]}"
            sha="${shas[$i]}"
            work="v_$i"
            git init "$work"
            cd "$work"
            git remote add origin "https://github.com/${repo}.git"
            git fetch --depth 1 origin "${sha}"
            git cat-file -t "${sha}" | grep -q commit
            cd ..
            rm -rf "$work"
            i=$((i+1))
          done

      - name: Checkout (pinned SHA)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Prepare
        shell: bash
        run: |
          set -euo pipefail
          install -d dl out/A out/B scripts
          date +%Y%m%d-%H%M%S > RUN_ID_TAG.txt
          echo "RUN_ID_TAG=$(cat RUN_ID_TAG.txt)" >> "$GITHUB_ENV"

      - name: Download zips
        shell: bash
        run: |
          set -euo pipefail
          curl -L "${{ inputs.CODE_ZIP_A_URL }}" -o dl/codeA.zip
          curl -L "${{ inputs.CODE_ZIP_B_URL }}" -o dl/codeB.zip
          curl -L "${{ inputs.DATA_ZIP_URL }}" -o dl/data.zip

      - name: Unzip data and detect CSV
        id: csvdetect
        shell: bash
        run: |
          set -euo pipefail
          unzip -q -o dl/data.zip -d data
          shopt -s globstar nullglob
          match=()
          for f in data/**/${{ inputs.CSV_GLOB }}; do
            if [ -f "$f" ]; then match+=("$f"); fi
          done
          if [ "${#match[@]}" -eq 0 ]; then
            echo "::error::CSVDetect"
            echo "No CSV matched glob: ${{ inputs.CSV_GLOB }}"
            exit 1
          fi
          echo "csv_path=${match[0]}" >> "$GITHUB_OUTPUT"
          echo "CSV_PATH=${match[0]}" >> "$GITHUB_ENV"

      - name: Setup Python (pinned SHA)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ inputs.PY }}

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy scikit-learn pyyaml
          fi

      - name: Run A
        shell: bash
        run: |
          set -euo pipefail
          rm -rf _codepack
          unzip -q -o dl/codeA.zip -d _codepack
          python backtest/runner_patched.py --data-root data --csv-glob "${{ inputs.CSV_GLOB }}" --params conf/params_champion.yml --outdir out/A
          for f in summary.json gating_debug.json preds_test.csv trades.csv; do
            [ -f "out/A/$f" ] || printf '{}' > "out/A/${f}"
          done

      - name: Run B
        shell: bash
        run: |
          set -euo pipefail
          rm -rf _codepack
          unzip -q -o dl/codeB.zip -d _codepack
          python backtest/runner_patched.py --data-root data --csv-glob "${{ inputs.CSV_GLOB }}" --params conf/params_champion.yml --outdir out/B
          for f in summary.json gating_debug.json preds_test.csv trades.csv; do
            [ -f "out/B/$f" ] || printf '{}' > "out/B/${f}"
          done

      - name: Compare summaries
        shell: bash
        run: |
          set -euo pipefail
          f="scripts/compare_summaries.py"
          printf '%s
' 'import json,sys,os' > "$f"
          printf '%s
' 'def load(p):' '  try:' '    return json.load(open(p))' '  except Exception:' '    return {}' >> "$f"
          printf '%s
' 'a=load("out/A/summary.json")' 'b=load("out/B/summary.json")' 'cmp={"A":a,"B":b}' 'json.dump(cmp,open("out/compare_summary.json","w"),ensure_ascii=True,indent=2)' >> "$f"
          python "$f"

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: compare_${{ github.run_id }}_${{ env.RUN_ID_TAG }}
          path: |
            out/A
            out/B
            out/compare_summary.json
          if-no-files-found: warn
